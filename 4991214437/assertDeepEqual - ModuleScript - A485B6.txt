-- Legit-GDumper by legitimate0x1!

-- Path --> Players.Security13453.Backpack.Building Tools.Vendor.Roact.assertDeepEqual
-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-11-03 06:50:57
-- Luau version 6, Types version 3
-- Time taken: 0.001682 seconds

local function deepEqual_upvr(arg1, arg2) -- Line 9, Named "deepEqual"
	--[[ Upvalues[1]:
		[1]: deepEqual_upvr (readonly)
	]]
	if typeof(arg1) ~= typeof(arg2) then
		return false, "{1} is of type %s, but {2} is of type %s":format(typeof(arg1), typeof(arg2))
	end
	if typeof(arg1) == "table" then
		local tbl_2 = {}
		for i, v in pairs(arg1) do
			tbl_2[i] = true
			local deepEqual_upvr_result1, deepEqual_upvr_result2_2 = deepEqual_upvr(v, arg2[i])
			if not deepEqual_upvr_result1 then
				return false, deepEqual_upvr_result2_2:gsub("{1}", "{1}[%s]":format(tostring(i))):gsub("{2}", "{2}[%s]":format(tostring(i)))
			end
		end
		for i_2, v_2 in pairs(arg2) do
			if not tbl_2[i_2] then
				local deepEqual_result1, deepEqual_upvr_result2_3 = deepEqual_upvr(v_2, arg1[i_2])
				if not deepEqual_result1 then
					return false, deepEqual_upvr_result2_3:gsub("{1}", "{1}[%s]":format(tostring(i_2))):gsub("{2}", "{2}[%s]":format(tostring(i_2)))
				end
			end
		end
		return true
	end
	if arg1 == arg2 then
		return true
	end
	return false, "{1} ~= {2}"
end
return function(arg1, arg2) -- Line 59, Named "assertDeepEqual"
	--[[ Upvalues[1]:
		[1]: deepEqual_upvr (readonly)
	]]
	local deepEqual_upvr_result1_2, deepEqual_upvr_result2_4 = deepEqual_upvr(arg1, arg2)
	if not deepEqual_upvr_result1_2 then
		error("Values were not deep-equal.\n%s":format(deepEqual_upvr_result2_4:gsub("{1}", "first"):gsub("{2}", "second")), 2)
	end
end